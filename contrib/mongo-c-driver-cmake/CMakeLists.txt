set (libbson_VERSION_MAJOR 1)
set (libbson_VERSION_MINOR 27)
set (libbson_VERSION_PATCH 0)
set (libbson_VERSION 1.27.0)

set(LIBBSON_SOURCES_ROOT "${ClickHouse_SOURCE_DIR}/contrib/mongo-c-driver/src")
set(LIBBSON_SOURCE_DIR "${LIBBSON_SOURCES_ROOT}/libbson/src")
file(GLOB_RECURSE LIBBSON_SOURCES "${LIBBSON_SOURCE_DIR}/*.c")

include (TestBigEndian)
test_big_endian (BSON_BIG_ENDIAN)
if (BSON_BIG_ENDIAN)
    set (BSON_BYTE_ORDER 4321)
else ()
    set (BSON_BYTE_ORDER 1234)
endif ()

include (CheckFunctionExists)
include (CheckIncludeFile)
include (CheckStructHasMember)
include (CheckSymbolExists)
check_symbol_exists (snprintf stdio.h BSON_HAVE_SNPRINTF)
if (BSON_HAVE_SNPRINTF)
    set(BSON_HAVE_SNPRINTF 1)
else()
    set(BSON_HAVE_SNPRINTF 0)
endif()
check_struct_has_member ("struct timespec" tv_sec time.h BSON_HAVE_TIMESPEC)
if (BSON_HAVE_TIMESPEC)
    set(BSON_HAVE_TIMESPEC 1)
else()
    set(BSON_HAVE_TIMESPEC 0)
endif()
check_symbol_exists (gmtime_r time.h BSON_HAVE_GMTIME_R)
if (BSON_HAVE_GMTIME_R)
    set(BSON_HAVE_GMTIME_R 1)
else()
    set(BSON_HAVE_GMTIME_R 0)
endif()
check_function_exists (rand_r BSON_HAVE_RAND_R)
if (BSON_HAVE_RAND_R)
    set(BSON_HAVE_RAND_R 1)
else()
    set(BSON_HAVE_RAND_R 0)
endif()
check_include_file (strings.h BSON_HAVE_STRINGS_H)
if (BSON_HAVE_STRINGS_H)
    set(BSON_HAVE_STRINGS_H 1)
else()
    set(BSON_HAVE_STRINGS_H 0)
endif()
check_symbol_exists (strlcpy string.h BSON_HAVE_STRLCPY)
if (BSON_HAVE_STRLCPY)
    set(BSON_HAVE_STRLCPY 1)
else()
    set(BSON_HAVE_STRLCPY 0)
endif()
check_include_file (stdbool.h BSON_HAVE_STDBOOL_H)
if (BSON_HAVE_STDBOOL_H)
    set(BSON_HAVE_STDBOOL_H 1)
else()
    set(BSON_HAVE_STDBOOL_H 0)
endif()
check_symbol_exists (clock_gettime time.h BSON_HAVE_CLOCK_GETTIME)
if (BSON_HAVE_CLOCK_GETTIME)
    set(BSON_HAVE_CLOCK_GETTIME 1)
else()
    set(BSON_HAVE_CLOCK_GETTIME 0)
endif()
check_symbol_exists (strnlen string.h BSON_HAVE_STRNLEN)
if (BSON_HAVE_STRNLEN)
    set(BSON_HAVE_STRNLEN 1)
else()
    set(BSON_HAVE_STRNLEN 0)
endif()
set(BSON_EXTRA_ALIGN 1)
if (WIN32)
    set (BSON_OS 2)
else ()
    set (BSON_OS 1)
endif ()
set(MONGOC_ENABLE_DEBUG_ASSERTIONS 0)
set(MONGOC_ENABLE_MONGODB_AWS_AUTH 0)
set(MONGOC_ENABLE_COMPRESSION_ZLIB 0)
set (MONGOC_ENABLE_COMPRESSION 0)
set (MONGOC_ENABLE_COMPRESSION_SNAPPY 0)
set (MONGOC_ENABLE_COMPRESSION_ZLIB 0)
set (MONGOC_ENABLE_COMPRESSION_ZSTD 0)
set(MONGOC_ENABLE_STATIC_BUILD 1)

configure_file(
        ${LIBBSON_SOURCE_DIR}/bson/bson-config.h.in
        ${LIBBSON_SOURCE_DIR}/bson/bson-config.h
)
configure_file(
        ${LIBBSON_SOURCE_DIR}/bson/bson-version.h.in
        ${LIBBSON_SOURCE_DIR}/bson/bson-version.h
)

configure_file(
        ${LIBBSON_SOURCE_DIR}/bson/bson-version.h.in
        ${LIBBSON_SOURCE_DIR}/bson/bson-version.h
)

set(COMMON_SOURCE_DIR "${LIBBSON_SOURCES_ROOT}/common")
file(GLOB_RECURSE COMMON_SOURCES "${COMMON_SOURCE_DIR}/*.c")
configure_file(
        ${COMMON_SOURCE_DIR}/common-config.h.in
        ${COMMON_SOURCE_DIR}/common-config.h
)

add_library(_libbson ${LIBBSON_SOURCES} ${COMMON_SOURCES})
add_library(ch_contrib::libbson ALIAS _libbson)
target_include_directories(_libbson SYSTEM PUBLIC ${LIBBSON_SOURCE_DIR} ${COMMON_SOURCE_DIR})
target_compile_definitions(_libbson PRIVATE BSON_COMPILATION)
if (OS_LINUX)
    target_compile_definitions(_libbson PRIVATE -D_GNU_SOURCE -D_POSIX_C_SOURCE=199309L -D_XOPEN_SOURCE=600)
elseif (OS_DARWIN)
    target_compile_definitions(_libbson PRIVATE -D_DARWIN_C_SOURCE)
endif()


set(RESOLVE_LIB_NAME)
if(WIN32)
    set(RESOLVE_LIB_NAME Dnsapi)
    set(MONGOC_HAVE_DNSAPI 1)
else()
    set(MONGOC_HAVE_DNSAPI 0)

    # Try to find the search functions for various configurations.
    # Headers required by minimum on the strictest system: (Tested on FreeBSD 13)
    set(resolve_headers netinet/in.h sys/types.h arpa/nameser.h resolv.h)
    set(CMAKE_REQUIRED_LIBRARIES resolv)
    check_symbol_exists(res_nsearch "${resolve_headers}" MONGOC_HAVE_RES_NSEARCH_RESOLV)
    check_symbol_exists(res_search "${resolve_headers}" MONGOC_HAVE_RES_SEARCH_RESOLV)
    check_symbol_exists(res_ndestroy "${resolve_headers}" MONGOC_HAVE_RES_NDESTROY_RESOLV)
    check_symbol_exists(res_nclose "${resolve_headers}" MONGOC_HAVE_RES_NCLOSE_RESOLV)
    if(
    (MONGOC_HAVE_RES_NSEARCH_RESOLV
            AND (MONGOC_HAVE_RES_NDESTROY_RESOLV OR MONGOC_HAVE_RES_NCLOSE_RESOLV))
            OR MONGOC_HAVE_RES_SEARCH_RESOLV
    )
        set(RESOLVE_LIB_NAME resolv)
    else()
        # Can we use name resolution with just libc?
        unset(CMAKE_REQUIRED_LIBRARIES)
        check_symbol_exists(res_nsearch "${resolve_headers}" MONGOC_HAVE_RES_NSEARCH_NOLINK)
        check_symbol_exists(res_search "${resolve_headers}" MONGOC_HAVE_RES_SEARCH_NOLINK)
        check_symbol_exists(res_ndestroy "${resolve_headers}" MONGOC_HAVE_RES_NDESTROY_NOLINK)
        check_symbol_exists(res_nclose "${resolve_headers}" MONGOC_HAVE_RES_NCLOSE_NOLINK)
        if(
        (MONGOC_HAVE_RES_NSEARCH_NOLINK
                AND (MONGOC_HAVE_RES_NDESTROY_NOLINK OR MONGOC_HAVE_RES_NCLOSE_NOLINK))
                OR MONGOC_HAVE_RES_SEARCH_NOLINK
        )
            message(VERBOSE "Name resolution is provided by the C runtime")
        endif()
    endif()
endif()
if (MONGOC_HAVE_RES_NSEARCH_NOLINK OR MONGOC_HAVE_RES_NSEARCH_RESOLV)
    set(MONGOC_HAVE_RES_NSEARCH 1)
else()
    set(MONGOC_HAVE_RES_NSEARCH 0)
endif()
if (MONGOC_HAVE_RES_SEARCH_NOLINK OR MONGOC_HAVE_RES_SEARCH_RESOLV)
    set(MONGOC_HAVE_RES_SEARCH 1)
else()
    set(MONGOC_HAVE_RES_SEARCH 0)
endif()
if (MONGOC_HAVE_RES_NDESTROY_NOLINK OR MONGOC_HAVE_RES_NDESTROY_RESOLV)
    set(MONGOC_HAVE_RES_NDESTROY 1)
else()
    set(MONGOC_HAVE_RES_NDESTROY 0)
endif()
if (MONGOC_HAVE_RES_NCLOSE_NOLINK OR MONGOC_HAVE_RES_NCLOSE_RESOLV)
    set(MONGOC_HAVE_RES_NCLOSE 1)
else()
    set(MONGOC_HAVE_RES_NCLOSE 0)
endif()
check_symbol_exists(
        ASN1_STRING_get0_data
        "openssl/asn1.h"
        MONGOC_HAVE_ASN1_STRING_GET0_DATA
)
if (MONGOC_HAVE_ASN1_STRING_GET0_DATA)
    set(MONGOC_HAVE_ASN1_STRING_GET0_DATA 1)
else()
    set(MONGOC_HAVE_ASN1_STRING_GET0_DATA 0)
endif()

set(MONGOC_ENABLE_SSL_SECURE_CHANNEL 0)
set(MONGOC_ENABLE_SSL_SECURE_TRANSPORT 0)
set(MONGOC_ENABLE_SSL_LIBRESSL 0)
set(MONGOC_ENABLE_CRYPTO_CNG 0)
set(MONGOC_ENABLE_CRYPTO_COMMON_CRYPTO 0)
set(MONGOC_ENABLE_CRYPTO_SYSTEM_PROFILE 0)
set(MONGOC_HAVE_ASN1_STRING_GET0_DATA 0)
if (ENABLE_OPENSSL OR ENABLE_OPENSSL_DYNAMIC)
    set(MONGOC_ENABLE_SSL 1)
    set(MONGOC_ENABLE_CRYPTO 1)
    set(MONGOC_ENABLE_SSL_OPENSSL 1)
    set(MONGOC_ENABLE_CRYPTO_LIBCRYPTO 1)
    check_symbol_exists(
            ASN1_STRING_get0_data
            "openssl/asn1.h"
            MONGOC_HAVE_ASN1_STRING_GET0_DATA
    )
    if (MONGOC_HAVE_ASN1_STRING_GET0_DATA)
        set(MONGOC_HAVE_ASN1_STRING_GET0_DATA 1)
    endif()
else()
    set(MONGOC_ENABLE_SSL 0)
    set(MONGOC_ENABLE_CRYPTO 0)
    set(MONGOC_ENABLE_SSL_OPENSSL 0)
    set(MONGOC_ENABLE_CRYPTO_LIBCRYPTO 0)
endif()

set(MONGOC_ENABLE_SASL_CYRUS 0)
set(MONGOC_ENABLE_SASL 0)
set(MONGOC_ENABLE_SASL_SSPI 0)
set(MONGOC_HAVE_SASL_CLIENT_DONE 0)

if (WIN32)
    SET (CMAKE_EXTRA_INCLUDE_FILES "ws2tcpip.h")
else ()
    SET (CMAKE_EXTRA_INCLUDE_FILES "sys/socket.h")
endif ()
check_type_size(socklen_t MONGOC_HAVE_SOCKLEN)
if (MONGOC_HAVE_SOCKLEN)
    set(MONGOC_HAVE_SOCKLEN 1)
    set (MONGOC_SOCKET_ARG3 "socklen_t")
else()
    set(MONGOC_HAVE_SOCKLEN 0)
    set (MONGOC_SOCKET_ARG3 "int")
endif()
set(MONGOC_SOCKET_ARG2 "struct sockaddr")

# TODO: options
set(MONGOC_ENABLE_RDTSCP 0)
set(MONGOC_NO_AUTOMATIC_GLOBALS 1)
set(MONGOC_ENABLE_STATIC_INSTALL 0)
set(MONGOC_ENABLE_SHM_COUNTERS 0)
set(MONGOC_HAVE_SCHED_GETCPU 0)
set(MONGOC_ENABLE_CLIENT_SIDE_ENCRYPTION 0)
set(MONGOC_HAVE_SS_FAMILY 0)
set(MONGOC_TRACE 0)
set(MONGOC_ENABLE_SRV 0)

set(LIBMONGOC_SOURCE_DIR "${LIBBSON_SOURCES_ROOT}/libmongoc/src")
file(GLOB_RECURSE LIBMONGOC_SOURCES "${LIBMONGOC_SOURCE_DIR}/*.c")
set(UTF8PROC_SOURCE_DIR "${LIBBSON_SOURCES_ROOT}/utf8proc-2.8.0")
set(UTF8PROC_SOURCES "${UTF8PROC_SOURCE_DIR}/utf8proc.c")
configure_file(
        ${LIBMONGOC_SOURCE_DIR}/mongoc/mongoc-config.h.in
        ${LIBMONGOC_SOURCE_DIR}/mongoc/mongoc-config.h
)

add_library(_libmongoc ${LIBMONGOC_SOURCES} ${COMMON_SOURCES} ${UTF8PROC_SOURCES})
add_library(ch_contrib::libmongoc ALIAS _libmongoc)
target_include_directories(_libmongoc SYSTEM PUBLIC ${LIBMONGOC_SOURCE_DIR} ${COMMON_SOURCE_DIR} ${UTF8PROC_SOURCE_DIR})
target_compile_definitions(_libmongoc PRIVATE MONGOC_COMPILATION)
target_link_libraries(_libmongoc ch_contrib::libbson)
if (ENABLE_OPENSSL OR ENABLE_OPENSSL_DYNAMIC)
    target_link_libraries(_libmongoc OpenSSL::SSL)
endif()
